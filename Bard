import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog, messagebox
import socket
import threading
import queue
import uuid

class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")

        self.sessions = {}  # Dictionary to store sessions
        self.current_session = None  # Currently active session

        self.setup_menu()
        self.setup_ui()
        self.process_queue()

    def setup_menu(self):
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)

        connection_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Connection", menu=connection_menu)
        connection_menu.add_command(label="Add Session", command=self.add_session)
        connection_menu.add_command(label="Connect", command=self.connect_to_server)

    def setup_ui(self):
        self.grid(row=0, column=0, sticky="nsew")
        self.master.rowconfigure(0, weight=1)
        self.master.columnconfigure(0, weight=1)
        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)

        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=0, column=0, sticky="nsew")

        self.add_session()  # Add initial session

    def add_session(self):
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            "host": 'localhost',
            "port": 5000,
            "socket": None,
            "message_queue": queue.Queue(),
            "frame": None,
            "order_tree": None,
            "order_transactions_list": None,
            "message_info_text": None,
            "symbol_entry": None,
            "price_entry": None,
            "qty_entry": None,
            "ordertype_entry": None,
            "receive_thread": None,
            "tab_color": self.get_next_color()  # Assign a color to the session
        }
        self.create_session_tab(session_id)
        self.switch_to_session(session_id)

    def get_next_color(self):
        # Cycle through a list of colors
        colors = ["lightblue", "lightgreen", "lightyellow", "lightcoral", "lavender"]
        if not hasattr(self, "color_index"):
            self.color_index = 0
        color = colors[self.color_index]
        self.color_index = (self.color_index + 1) % len(colors)
        return color

    def create_session_tab(self, session_id):
        session_data = self.sessions[session_id]
        frame = ttk.Frame(self.notebook)
        session_data["frame"] = frame
        self.notebook.add(frame, text=f"Session {len(self.sessions)}")

        # Apply color to the tab
        style = ttk.Style()
        style.configure(f"TNotebook.Tab.{session_id}", background=session_data["tab_color"]) 
        style.map(f"TNotebook.Tab.{session_id}", background=[("selected", "white")])  # Highlight selected tab

        self.create_session_content(session_id)
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_changed)

    def create_session_content(self, session_id):
        # ... (Rest of the code remains the same)

    # ... (Rest of the code remains the same)

if __name__ == "__main__":
    root = tk.Tk()
    app = FixClientSimulator(master=root)
    app.pack(fill="both", expand=True)
    root.mainloop()
