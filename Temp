import tkinter as tk
from tkinter import ttk

class FixFieldsFrame(tk.Frame):
    def __init__(self, master, fix_fields):
        super().__init__(master)
        self.fix_fields = fix_fields
        self.entries = {}  # Store widgets for each field
        self.optional_checkboxes = {}  # Track checkboxes for optional fields
        self.init_ui()

    def init_ui(self):
        for i, field in enumerate(self.fix_fields):
            field_name = field["name"]
            is_optional = field.get("optional", False)
            options = field.get("options", None)

            # Field label
            ttk.Label(self, text=field_name).grid(row=i, column=0, sticky="w", padx=5, pady=5)

            # Field input (Entry or OptionMenu)
            if options:
                selected_option = tk.StringVar(value=options[0])  # Default to first option
                dropdown = ttk.OptionMenu(self, selected_option, *options)
                dropdown.grid(row=i, column=1, padx=5, pady=5, sticky="ew")
                self.entries[field_name] = selected_option
            else:
                entry = ttk.Entry(self)
                entry.grid(row=i, column=1, padx=5, pady=5, sticky="ew")
                self.entries[field_name] = entry

            # Optional checkbox
            if is_optional:
                optional_var = tk.BooleanVar(value=False)
                optional_checkbox = ttk.Checkbutton(self, text="Optional", variable=optional_var)
                optional_checkbox.grid(row=i, column=2, padx=5, pady=5)
                self.optional_checkboxes[field_name] = optional_var

        # Submit button
        submit_btn = ttk.Button(self, text="Submit", command=self.submit_fields)
        submit_btn.grid(row=len(self.fix_fields), column=0, columnspan=3, pady=10)

    def submit_fields(self):
        field_values = {}
        for field_name, widget in self.entries.items():
            # Check if the field is optional and not checked
            if field_name in self.optional_checkboxes and not self.optional_checkboxes[field_name].get():
                continue  # Skip this optional field

            # Get the value from the appropriate widget
            if isinstance(widget, tk.StringVar):  # For OptionMenu
                field_values[field_name] = widget.get()
            elif isinstance(widget, ttk.Entry):  # For Entry
                field_values[field_name] = widget.get()

        print("Submitted Fields:", field_values)  # Display field values (can be sent as FIX message)

# Example FIX fields
fix_fields = [
    {"name": "Symbol", "optional": False},
    {"name": "Price", "optional": False},
    {"name": "Quantity", "optional": False},
    {"name": "Order Type", "optional": True, "options": ["Market", "Limit", "Stop"]},
    {"name": "Time in Force", "optional": True, "options": ["Day", "GTC", "IOC"]},
]

# Main application
root = tk.Tk()
root.title("FIX Input Fields")

fix_frame = FixFieldsFrame(root, fix_fields)
fix_frame.pack(fill="both", expand=True, padx=10, pady=10)

root.mainloop()
