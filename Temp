import tkinter as tk
from tkinter import ttk
from tkinter import PhotoImage

class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")

        # Notebook for multiple sessions
        self.notebook = ttk.Notebook(self.master)
        self.notebook.pack(fill="both", expand=True)

        # Session tracking
        self.sessions = {}

        # Load images for tab icons
        self.connected_icon = PhotoImage(file="connected_icon.png")  # Replace with your image path
        self.disconnected_icon = PhotoImage(file="disconnected_icon.png")  # Replace with your image path

        # Menu bar
        self.setup_menu()

    def setup_menu(self):
        """Creates the menu bar."""
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)

        session_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Session", menu=session_menu)
        session_menu.add_command(label="Add New Session", command=self.add_new_session)
        session_menu.add_command(label="Disconnect Session", command=self.disconnect_session)
        session_menu.add_command(label="Reconnect Session", command=self.reconnect_session)

    def add_new_session(self):
        """Opens a dialog to get session name and user info."""
        session_name = f"Session {len(self.notebook.tabs()) + 1}"  # Auto-generate a name
        self.create_session_tab(session_name)

    def create_session_tab(self, session_name):
        """Creates a new tab with session tracking."""
        session_frame = ttk.Frame(self.notebook)
        tab_id = self.notebook.index("end")
        self.notebook.add(session_frame, text="", image=self.connected_icon)  # Default image (connected)

        # Store session state (Connected by default)
        self.sessions[tab_id] = {"name": session_name, "status": "Connected"}

        # Label inside the tab to display session name
        session_label = ttk.Label(session_frame, text=f"Session: {session_name}", font=("Arial", 10))
        session_label.pack(anchor="w", padx=10, pady=5)

    def disconnect_session(self):
        """Marks the selected session as disconnected and updates tab image."""
        tab_id = self.notebook.index(self.notebook.select())  # Get selected tab index
        if tab_id in self.sessions:
            self.sessions[tab_id]["status"] = "Disconnected"
            session_name = self.sessions[tab_id]["name"]
            self.notebook.tab(tab_id, text=f"{session_name} (Disconnected)", image=self.disconnected_icon)  # Change image
            self.update_tab_style(tab_id)

    def reconnect_session(self):
        """Marks the selected session as connected and updates tab image."""
        tab_id = self.notebook.index(self.notebook.select())  # Get selected tab index
        if tab_id in self.sessions:
            self.sessions[tab_id]["status"] = "Connected"
            session_name = self.sessions[tab_id]["name"]
            self.notebook.tab(tab_id, text=session_name, image=self.connected_icon)  # Change image back
            self.update_tab_style(tab_id)

    def update_tab_style(self, tab_id):
        """Updates tab image based on session status."""
        if tab_id in self.sessions:
            session_status = self.sessions[tab_id]["status"]
            if session_status == "Connected":
                self.notebook.tab(tab_id, image=self.connected_icon)
            elif session_status == "Disconnected":
                self.notebook.tab(tab_id, image=self.disconnected_icon)

if __name__ == "__main__":
    root = tk.Tk()
    app = FixClientSimulator(master=root)
    app.pack(fill="both", expand=True)
    root.mainloop()
