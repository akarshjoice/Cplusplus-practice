import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog, messagebox
import socket
import threading
import queue

class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")

        # Store sessions
        self.sessions = {}

        # Menu bar
        self.setup_menu()

        # GUI elements
        self.setup_ui()

    def setup_menu(self):
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)

        # Connection menu
        connection_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Connection", menu=connection_menu)
        connection_menu.add_command(label="Connect", command=self.show_connection_dialog)

    def setup_ui(self):
        self.grid(row=0, column=0, sticky="nsew")
        self.master.rowconfigure(0, weight=1)
        self.master.columnconfigure(0, weight=1)

        # Main Notebook (for Sessions)
        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=1, column=0, sticky="nsew")

        # Add Session Button
        self.add_session_button = ttk.Button(self, text="Add Session", command=self.add_session)
        self.add_session_button.grid(row=2, column=0, pady=5)

    def add_session(self):
        session_name = simpledialog.askstring("New Session", "Enter session name:")
        if not session_name:
            return

        if session_name in self.sessions:
            messagebox.showerror("Error", "Session already exists!")
            return

        # Create a new session frame
        session_frame = ttk.Frame(self.notebook)
        self.sessions[session_name] = session_frame

        # Add session-specific UI inside the tab
        self.create_session_ui(session_frame, session_name)

        # Add tab to notebook
        self.notebook.add(session_frame, text=session_name)

    def create_session_ui(self, parent, session_name):
        """Creates UI for a specific session inside the notebook tab."""
        # Order Details Section
        order_tree_frame = ttk.Labelframe(parent, text=f"{session_name} - Order Details")
        order_tree_frame.pack(fill="both", expand=True, padx=5, pady=5)

        order_tree = ttk.Treeview(order_tree_frame, columns=("ClOrdID", "Price", "Quantity", "MsgType"), show="headings")
        order_tree.heading("ClOrdID", text="ClOrdID")
        order_tree.heading("Price", text="Price")
        order_tree.heading("Quantity", text="Quantity")
        order_tree.heading("MsgType", text="MessageType")
        order_tree.pack(fill="both", expand=True)

        # Order Transactions
        transactions_frame = ttk.Labelframe(parent, text="Order Transactions")
        transactions_frame.pack(fill="both", expand=True, padx=5, pady=5)

        transactions_list = tk.Listbox(transactions_frame)
        transactions_list.pack(fill="both", expand=True)

        # FIX Fields
        fix_fields_frame = ttk.Labelframe(parent, text="FIX Fields")
        fix_fields_frame.pack(fill="x", padx=5, pady=5)

        ttk.Label(fix_fields_frame, text="Symbol:").pack(side="left", padx=5)
        symbol_entry = ttk.Entry(fix_fields_frame)
        symbol_entry.pack(side="left", padx=5)

        ttk.Label(fix_fields_frame, text="Price:").pack(side="left", padx=5)
        price_entry = ttk.Entry(fix_fields_frame)
        price_entry.pack(side="left", padx=5)

        ttk.Label(fix_fields_frame, text="Qty:").pack(side="left", padx=5)
        qty_entry = ttk.Entry(fix_fields_frame)
        qty_entry.pack(side="left", padx=5)

        ttk.Label(fix_fields_frame, text="Order Type:").pack(side="left", padx=5)
        ordertype_entry = ttk.Entry(fix_fields_frame)
        ordertype_entry.pack(side="left", padx=5)

        send_button = ttk.Button(fix_fields_frame, text="Send", command=lambda: self.send_message(session_name))
        send_button.pack(side="left", padx=10)

        # Store session-specific elements
        self.sessions[session_name] = {
            "frame": parent,
            "order_tree": order_tree,
            "transactions_list": transactions_list,
            "symbol_entry": symbol_entry,
            "price_entry": price_entry,
            "qty_entry": qty_entry,
            "ordertype_entry": ordertype_entry
        }

    def send_message(self, session_name):
        """Send a FIX message from a specific session."""
        session = self.sessions.get(session_name)
        if not session:
            return

        symbol = session["symbol_entry"].get()
        price = session["price_entry"].get()
        qty = session["qty_entry"].get()
        ordertype = session["ordertype_entry"].get()

        message = f"{session_name} - Symbol={symbol};Price={price};Qty={qty};OrderType={ordertype}"
        print(f"Sending Message: {message}")  # Replace with actual socket sending logic

        # Clear entries
        session["symbol_entry"].delete(0, tk.END)
        session["price_entry"].delete(0, tk.END)
        session["qty_entry"].delete(0, tk.END)
        session["ordertype_entry"].delete(0, tk.END)

    def show_connection_dialog(self):
        """Show a dialog to enter connection details."""
        dialog = tk.Toplevel(self)
        dialog.title("Connect to Server")
        dialog.geometry("300x150")

        tk.Label(dialog, text="Server IP:").pack(pady=5)
        ip_entry = ttk.Entry(dialog)
        ip_entry.pack(pady=5)

        tk.Label(dialog, text="Port:").pack(pady=5)
        port_entry = ttk.Entry(dialog)
        port_entry.pack(pady=5)

        def connect():
            ip = ip_entry.get().strip()
            port = port_entry.get().strip()
            if ip and port.isdigit():
                self.host = ip
                self.port = int(port)
                dialog.destroy()
                self.connect_to_server()
            else:
                messagebox.showerror("Error", "Invalid IP or Port")

        connect_button = ttk.Button(dialog, text="Connect", command=connect)
        connect_button.pack(pady=10)

    def connect_to_server(self):
        """Establish connection to the server."""
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.host, self.port))
            print("Connected to server")
        except Exception as e:
            print(f"Error connecting to server: {e}")
            messagebox.showerror("Connection Error", f"Could not connect to server: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = FixClientSimulator(master=root)
    app.pack(fill="both", expand=True)
    root.mainloop()
