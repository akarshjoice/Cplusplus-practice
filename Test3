import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog, messagebox
import socket
import threading
import queue


class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")
        master.geometry("1000x600")
        master.minsize(800, 500)

        # Socket setup
        self.host = 'localhost'
        self.port = 5000
        self.client_socket = None
        self.message_queue = queue.Queue()

        # Apply modern theme
        self.style = ttk.Style()
        self.style.configure("TLabel", font=("Arial", 12))
        self.style.configure("TEntry", font=("Arial", 12))
        self.style.configure("TButton", font=("Arial", 12))
        self.style.configure("Treeview.Heading", font=("Arial", 12, "bold"))

        # Menu bar
        self.setup_menu()

        # GUI layout
        self.setup_ui()

        # Start processing the message queue
        self.process_queue()

    def setup_menu(self):
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)

        connection_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Connection", menu=connection_menu)
        connection_menu.add_command(label="Connect", command=self.show_connection_dialog)
        connection_menu.add_separator()
        connection_menu.add_command(label="Exit", command=self.master.quit)

    def setup_ui(self):
        self.grid(row=0, column=0, sticky="nsew")
        self.master.rowconfigure(0, weight=1)
        self.master.columnconfigure(0, weight=1)

        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=2)
        self.columnconfigure(1, weight=1)

        # Left Section
        left_frame = ttk.Frame(self)
        left_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        left_frame.rowconfigure(0, weight=1)
        left_frame.rowconfigure(1, weight=1)
        left_frame.rowconfigure(2, weight=1)

        # Order Details
        self.order_tree_frame = ttk.Labelframe(left_frame, text="Order Details", padding=10)
        self.order_tree_frame.grid(row=0, column=0, sticky="nsew")
        self.order_tree = ttk.Treeview(self.order_tree_frame, columns=("clordid", "price", "quantity", "messagetype"), show="headings")
        for col in ["clordid", "price", "quantity", "messagetype"]:
            self.order_tree.heading(col, text=col.capitalize())
            self.order_tree.column(col, width=100, anchor="center")
        self.order_tree.pack(fill="both", expand=True)

        # Scrollbars
        self.order_tree_scroll_y = ttk.Scrollbar(self.order_tree_frame, orient="vertical", command=self.order_tree.yview)
        self.order_tree.configure(yscrollcommand=self.order_tree_scroll_y.set)
        self.order_tree_scroll_y.pack(side="right", fill="y")

        # Order Transactions
        self.order_transactions_frame = ttk.Labelframe(left_frame, text="Order Transactions", padding=10)
        self.order_transactions_frame.grid(row=1, column=0, sticky="nsew")
        self.order_transactions_list = tk.Listbox(self.order_transactions_frame, font=("Arial", 12))
        self.order_transactions_list.pack(fill="both", expand=True)

        # FIX Fields
        self.fix_fields_frame = ttk.Labelframe(left_frame, text="FIX Fields", padding=10)
        self.fix_fields_frame.grid(row=2, column=0, sticky="nsew")
        self.fix_fields_frame.columnconfigure(1, weight=1)

        fields = [("Symbol", 0), ("Price", 1), ("Quantity", 2), ("Order Type", 3)]
        self.entries = {}
        for label, row in fields:
            ttk.Label(self.fix_fields_frame, text=label).grid(row=row, column=0, sticky="w", padx=5, pady=5)
            entry = ttk.Entry(self.fix_fields_frame)
            entry.grid(row=row, column=1, sticky="ew", padx=5, pady=5)
            self.entries[label] = entry

        self.send_button = ttk.Button(self.fix_fields_frame, text="Send Order", command=self.send_message)
        self.send_button.grid(row=4, column=0, columnspan=2, pady=10)

        # Right Section
        right_frame = ttk.Frame(self)
        right_frame.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)
        right_frame.rowconfigure(0, weight=1)

        # Message Info
        self.message_info_frame = ttk.Labelframe(right_frame, text="Message Info", padding=10)
        self.message_info_frame.grid(row=0, column=0, sticky="nsew")
        self.message_info_text = tk.Text(self.message_info_frame, wrap="word", font=("Arial", 12))
        self.message_info_text.pack(fill="both", expand=True)

    def show_connection_dialog(self):
        dialog = tk.Toplevel(self)
        dialog.title("Connect to Server")
        dialog.geometry("300x200")
        dialog.transient(self.master)
        dialog.grab_set()

        ttk.Label(dialog, text="Server IP:").pack(pady=5)
        ip_entry = ttk.Entry(dialog)
        ip_entry.pack(pady=5)

        ttk.Label(dialog, text="Port:").pack(pady=5)
        port_entry = ttk.Entry(dialog)
        port_entry.pack(pady=5)

        def connect():
            ip = ip_entry.get().strip()
            port = port_entry.get().strip()
            if ip and port.isdigit():
                self.host = ip
                self.port = int(port)
                dialog.destroy()
                self.connect_to_server()
            else:
                messagebox.showerror("Error", "Invalid IP or Port")

        ttk.Button(dialog, text="Connect", command=connect).pack(pady=10)

    def connect_to_server(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.host, self.port))
            threading.Thread(target=self.receive_messages, daemon=True).start()
            messagebox.showinfo("Connected", f"Connected to {self.host}:{self.port}")
        except Exception as e:
            messagebox.showerror("Connection Error", f"Error: {e}")

    def send_message(self):
        try:
            message = ";".join(f"{key}={entry.get().strip()}" for key, entry in self.entries.items())
            self.client_socket.sendall(message.encode())
            for entry in self.entries.values():
                entry.delete(0, tk.END)
        except Exception as e:
            messagebox.showerror("Error", f"Error sending message: {e}")

    def receive_messages(self):
        while True:
            try:
                data = self.client_socket.recv(1024).decode()
                if data:
                    self.message_queue.put(data)
                else:
                    break
            except Exception:
                break

    def process_queue(self):
        while not self.message_queue.empty():
            message = self.message_queue.get()
            self.message_info_text.insert(tk.END, message + "\n")
            self.message_info_text.see(tk.END)
        self.master.after(100, self.process_queue)


if __name__ == "__main__":
    root = tk.Tk()
    app = FixClientSimulator(master=root)
    app.pack(fill="both", expand=True)
    root.mainloop()
