delete(0, tk.END)
   import tkinter as tk
from tkinter import ttk
from tkinter import messagebox, Toplevel, filedialog
import socket
import threading
import queue
import time
import sys
import json
import os

class RegressionManager:
    def __init__(self, client_socket=None, regression_queue=None, status_callback=None, lock=None):
        self.client_socket = client_socket
        self.regression_queue = regression_queue or queue.Queue()
        self.status_callback = status_callback
        self.lock = lock or threading.Lock()
        self.is_running = False
        self.stop_event = threading.Event()
        
        # Load test cases from config file
        config_file = "test_cases.json"
        if os.path.exists(config_file):
            with open(config_file, "r") as f:
                self.test_cases = json.load(f)
        else:
            self.test_cases = [
                {"name": "Market Order", "symbol": "AAPL", "price": "150", "qty": "100", "ordertype": "1", "expected": "Order Accepted"},
                {"name": "Limit Order", "symbol": "GOOG", "price": "2000", "qty": "50", "ordertype": "2", "expected": "Order Accepted"},
                {"name": "Invalid Price", "symbol": "MSFT", "price": "-10", "qty": "100", "ordertype": "1", "expected": "Order Rejected"},
            ]
            with open(config_file, "w") as f:
                json.dump(self.test_cases, f, indent=4)
        
        self.results = {"total": 0, "pass": 0, "fail": 0, "running": False}

    def update_status(self, test_name, status, details=""):
        with self.lock:
            if self.status_callback:
                self.status_callback(test_name, status, details, self.results)
            else:
                summary = f"Total: {self.results['total']}, Pass: {self.results['pass']}, Fail: {self.results['fail']}"
                print(f"{test_name}: {status} - {details} | {summary}")

    def run_regression(self, selected_tests=None):
        with self.lock:
            if self.is_running:
                self.update_status("", "Error", "Regression already running")
                return False
            self.is_running = True
            self.stop_event.clear()
            self.results = {"total": 0, "pass": 0, "fail": 0, "running": True}

        if not self.client_socket:
            self.update_status("", "Error", "Not connected to server")
            with self.lock:
                self.is_running = False
            return False

        selected_tests = selected_tests or [test["name"] for test in self.test_cases]
        total_tests = len(selected_tests)
        self.update_status("", "Running", f"Starting regression tests ({total_tests} tests selected)")
        
        try:
            for test in [t for t in self.test_cases if t["name"] in selected_tests]:
                if self.stop_event.is_set():
                    self.update_status("", "Stopped", "Regression stopped by user")
                    break

                self.update_status(test["name"], "Running", "")
                message = f"Symbol={test['symbol']};Price={test['price']};Qty={test['qty']};OrderType={test['ordertype']}"
                with self.lock:
                    if not self.client_socket:
                        raise ConnectionError("Server disconnected")
                    self.client_socket.sendall(message.encode())
                time.sleep(1)
                try:
                    response = self.regression_queue.get(timeout=2)
                except queue.Empty:
                    raise ConnectionError("No response from server - connection may be lost")
                with self.lock:
                    self.results["total"] += 1
                    if test["expected"] in response:
                        self.results["pass"] += 1
                        self.update_status(test["name"], "Pass", response)
                    else:
                        self.results["fail"] += 1
                        self.update_status(test["name"], "Fail", f"Expected {test['expected']}, got {response}")
        except Exception as e:
            with self.lock:
                self.is_running = False
                self.results["running"] = False
            self.update_status("", "Error", f"Regression aborted: {str(e)}")
            return False
        
        with self.lock:
            self.is_running = False
            self.results["running"] = False
        if not self.stop_event.is_set():
            self.update_status("", "Complete", "Regression completed")
        return self.results["fail"] == 0

    def stop_regression(self):
        with self.lock:
            if self.is_running:
                self.stop_event.set()
                self.update_status("", "Stopping", "Stopping regression...")

    def is_regression_running(self):
        with self.lock:
            return self.is_running

class RegressionRunnerCLI:
    def __init__(self, host='localhost', port=5000, test_cases=None):
        self.host = host
        self.port = port
        self.test_cases = test_cases
        self.client_socket = None
        self.regression_queue = queue.Queue()
        self.regression_manager = RegressionManager(self.client_socket, self.regression_queue)

    def connect(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.host, self.port))
            self.regression_manager.client_socket = self.client_socket
            print("Connected to server")
            return True
        except Exception as e:
            print(f"Error connecting to server: {e}")
            return False

    def receive_messages(self):
        while True:
            try:
                data = self.client_socket.recv(1024).decode()
                if data:
                    self.regression_queue.put(data)
                else:
                    break
            except Exception as e:
                print(f"Error receiving message: {e}")
                break

    def run(self):
        if not self.connect():
            return False

        receive_thread = threading.Thread(target=self.receive_messages, daemon=True)
        receive_thread.start()

        success = self.regression_manager.run_regression(self.test_cases)
        self.client_socket.close()
        return success

class RegressionTab(tk.Frame):
    def __init__(self, parent, regression_manager, notebook, message_log_callback):
        super().__init__(parent)
        self.regression_manager = regression_manager
        self.notebook = notebook
        self.message_log_callback = message_log_callback
        self.setup_ui()

    def setup_ui(self):
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(3, weight=1)

        # Row 0: Control frame
        self.regression_control_frame = ttk.Frame(self)
        self.regression_control_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
        self.regression_control_frame.grid_columnconfigure(0, weight=1)

        self.run_regression_button = ttk.Button(self.regression_control_frame, 
                                              text="Run Regression", 
                                              command=self.show_regression_dialog)
        self.run_regression_button.grid(row=0, column=0, padx=5, sticky="w")

        self.stop_regression_button = ttk.Button(self.regression_control_frame, 
                                               text="Stop Regression", 
                                               command=self.stop_regression)
        self.stop_regression_button.grid(row=0, column=1, padx=5, sticky="w")

        # Row 1: Summary frame
        self.regression_summary_frame = ttk.Frame(self)
        self.regression_summary_frame.grid(row=1, column=0, sticky="ew", padx=5, pady=2)
        self.regression_summary_frame.grid_columnconfigure(0, weight=1)

        self.total_label = ttk.Label(self.regression_summary_frame, text="Total: 0")
        self.total_label.grid(row=0, column=0, padx=5, sticky="w")

        self.pass_label = ttk.Label(self.regression_summary_frame, text="Pass: 0")
        self.pass_label.grid(row=0, column=1, padx=5, sticky="w")

        self.fail_label = ttk.Label(self.regression_summary_frame, text="Fail: 0")
        self.fail_label.grid(row=0, column=2, padx=5, sticky="w")

        # Row 2: Progress bar
        self.progress = ttk.Progressbar(self, length=200, mode='determinate')
        self.progress.grid(row=2, column=0, sticky="ew", padx=5, pady=5)

        # Row 3: Status Treeview
        self.status_tree = ttk.Treeview(self, 
                                      columns=("Test", "Status", "Details"), 
                                      show="headings")
        self.status_tree.heading("Test", text="Test Case")
        self.status_tree.heading("Status", text="Status")
        self.status_tree.heading("Details", text="Details")
        self.status_tree.column("Test", width=100)
        self.status_tree.column("Status", width=60)
        self.status_tree.column("Details", width=300)
        self.status_tree.grid(row=3, column=0, sticky="nsew", padx=5, pady=5)
        
        self.status_tree.tag_configure("Running", background="yellow")
        self.status_tree.tag_configure("Pass", background="lightgreen")
        self.status_tree.tag_configure("Fail", background="salmon")
        self.status_tree.tag_configure("Complete", background="lightgray")

        # Initial button state
        self.update_button_states()

    def update_button_states(self):
        if self.regression_manager.is_regression_running():
            self.run_regression_button.config(state="disabled")
            self.stop_regression_button.config(state="normal")
        else:
            self.run_regression_button.config(state="normal")
            self.stop_regression_button.config(state="disabled")

    def update_regression_status(self, test_name, status, details, results):
        self.total_label.config(text=f"Total: {results['total']}")
        self.pass_label.config(text=f"Pass: {results['pass']}")
        self.fail_label.config(text=f"Fail: {results['fail']}")

        total_tests = len(self.regression_manager.test_cases)
        if total_tests > 0:
            self.progress['value'] = (results['total'] / total_tests) * 100

        if test_name:
            for item in self.status_tree.get_children():
                if self.status_tree.item(item, "values")[0] == test_name:
                    self.status_tree.item(item, values=(test_name, status, details), tags=(status,))
                    return
            self.status_tree.insert("", "end", values=(test_name, status, details), tags=(status,))
        else:
            self.status_tree.insert("", "end", values=("", status, details), tags=(status,))

        self.message_log_callback(f"Regression - {test_name}: {status} - {details}")
        self.update_button_states()

    def show_regression_dialog(self):
        if not self.regression_manager.client_socket:
            messagebox.showerror("Error", "Please connect to server first")
            return

        if self.regression_manager.is_regression_running():
            messagebox.showwarning("Warning", "Regression is already running")
            return

        dialog = Toplevel(self)
        dialog.title("Run Regression Tests")
        dialog.geometry("400x300")

        tk.Label(dialog, text="Select Test Cases:").pack(pady=5)
        
        test_listbox = tk.Listbox(dialog, selectmode="multiple")
        for test in self.regression_manager.test_cases:
            test_listbox.insert(tk.END, test["name"])
        test_listbox.pack(pady=5, fill="both", expand=True)

        def run_tests():
            selected_indices = test_listbox.curselection()
            selected_tests = [test_listbox.get(i) for i in selected_indices]
            if selected_tests:
                self.status_tree.delete(*self.status_tree.get_children())
                self.progress['value'] = 0
                self.total_label.config(text="Total: 0")
                self.pass_label.config(text="Pass: 0")
                self.fail_label.config(text="Fail: 0")
                dialog.destroy()
                threading.Thread(target=self.regression_manager.run_regression, 
                               args=(selected_tests,), daemon=True).start()
                self.notebook.select(self)
            else:
                messagebox.showwarning("Warning", "Please select at least one test case")

        ttk.Button(dialog, text="Run", command=run_tests).pack(pady=10)

    def stop_regression(self):
        if self.regression_manager.is_regression_running():
            self.regression_manager.stop_regression()
        else:
            messagebox.showinfo("Info", "No regression is currently running")

    def save_results(self):
        if not self.regression_manager.results["total"]:
            messagebox.showinfo("Info", "No results to save")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, 'w') as f:
                json.dump(self.regression_manager.results, f, indent=4)
            self.message_log_callback(f"Saved results to {file_path}")

    def load_results(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, 'r') as f:
                results = json.load(f)
            self.update_regression_status("", "Loaded", f"Results from {file_path}", results)

class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")

        self.host = 'localhost'
        self.port = 5000
        self.client_socket = None
        self.general_queue = queue.Queue()
        self.regression_queue = queue.Queue()
        self.lock = threading.Lock()
        self.regression_manager = RegressionManager(
            self.client_socket, 
            self.regression_queue, 
            None, 
            self.lock
        )

        self.setup_menu()
        self.setup_ui()
        self.process_queue()

    def setup_menu(self):
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)

        connection_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Connection", menu=connection_menu)
        connection_menu.add_command(label="Connect", command=self.show_connection_dialog)

        test_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Tests", menu=test_menu)
        test_menu.add_command(label="Run Regression", command=lambda: self.regression_tab.show_regression_dialog())
        test_menu.add_command(label="Save Results", command=self.regression_tab.save_results)
        test_menu.add_command(label="Load Results", command=self.regression_tab.load_results)

    def setup_ui(self):
        self.grid(row=0, column=0, sticky="nsew")
        self.master.rowconfigure(0, weight=1)
        self.master.columnconfigure(0, weight=1)

        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=0, column=0, sticky="nsew")
        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)

        # Order Entry Tab
        self.order_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.order_tab, text="Order Entry")
        
        self.order_tree_frame = ttk.Labelframe(self.order_tab, text="Order Details")
        self.order_tree_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.order_tree = ttk.Treeview(self.order_tree_frame, columns=("clordid", "price", "quantity", "messagetype"), show="headings")
        self.order_tree.heading("clordid", text="ClOrdID")
        self.order_tree.heading("price", text="Price")
        self.order_tree.heading("quantity", text="Quantity")
        self.order_tree.heading("messagetype", text="MessageType")
        self.order_tree.pack(fill="both", expand=True)

        self.order_transactions_frame = ttk.Labelframe(self.order_tab, text="Order Transactions")
        self.order_transactions_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.order_transactions_list = tk.Listbox(self.order_transactions_frame)
        self.order_transactions_list.pack(fill="both", expand=True)

        self.fix_fields_frame = ttk.Labelframe(self.order_tab, text="FIX Fields")
        self.fix_fields_frame.pack(fill="x", padx=5, pady=5)
        self.symbol_label = ttk.Label(self.fix_fields_frame, text="Symbol:")
        self.symbol_label.grid(row=0, column=0, padx=5, pady=5)
        self.symbol_entry = ttk.Entry(self.fix_fields_frame)
        self.symbol_entry.grid(row=0, column=1, padx=5, pady=5)
        self.price_label = ttk.Label(self.fix_fields_frame, text="Price:")
        self.price_label.grid(row=1, column=0, padx=5, pady=5)
        self.price_entry = ttk.Entry(self.fix_fields_frame)
        self.price_entry.grid(row=1, column=1, padx=5, pady=5)
        self.qty_label = ttk.Label(self.fix_fields_frame, text="Qty:")
        self.qty_label.grid(row=2, column=0, padx=5, pady=5)
        self.qty_entry = ttk.Entry(self.fix_fields_frame)
        self.qty_entry.grid(row=2, column=1, padx=5, pady=5)
        self.ordertype_label = ttk.Label(self.fix_fields_frame, text="OrderType:")
        self.ordertype_label.grid(row=3, column=0, padx=5, pady=5)
        self.ordertype_entry = ttk.Entry(self.fix_fields_frame)
        self.ordertype_entry.grid(row=3, column=1, padx=5, pady=5)
        self.send_button = ttk.Button(self.fix_fields_frame, text="Send", command=self.send_message)
        self.send_button.grid(row=4, columnspan=2, pady=10)

        # Messages Tab
        self.message_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.message_tab, text="Messages")
        
        self.message_info_frame = ttk.Labelframe(self.message_tab, text="Message Info")
        self.message_info_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.message_info_text = tk.Text(self.message_info_frame, height=10, wrap="word")
        self.message_info_text.pack(fill="both", expand=True)

        # Regression Tab
        self.regression_tab = RegressionTab(self.notebook, self.regression_manager, self.notebook, self.log_to_messages)
        self.regression_manager.status_callback = self.regression_tab.update_regression_status
        self.notebook.add(self.regression_tab, text="Regression")

        # Connection Status Indicator
        self.status_frame = ttk.Frame(self)
        self.status_frame.grid(row=1, column=0, sticky="ew", padx=5, pady=2)
        self.connection_status = ttk.Label(self.status_frame, text="Disconnected")
        self.connection_status.pack(side="left", padx=5)

        self.order_tree.bind("<ButtonRelease-1>", self.on_order_tree_select)
        self.order_transactions_list.bind("<ButtonRelease-1>", self.on_transaction_select)

    def log_to_messages(self, message):
        self.message_info_text.insert(tk.END, f"{message}\n")
        self.message_info_text.see(tk.END)

    def send_message(self):
        if self.regression_manager.is_regression_running():
            messagebox.showwarning("Warning", "Cannot send orders while regression is running")
            return

        symbol = self.symbol_entry.get()
        price = self.price_entry.get()
        qty = self.qty_entry.get()
        ordertype = self.ordertype_entry.get()

        message = f"Symbol={symbol};Price={price};Qty={qty};OrderType={ordertype}"
        try:
            with self.lock:
                self.client_socket.sendall(message.encode())
            self.log_to_messages(f"Sent: {message}")
            self.symbol_entry.delete(0, tk.END)
            self.price_entry.delete(0, tk.END)
            self.qty_entry.delete(0, tk.END)
            self.ordertype_entry.delete(0, tk.END)
        except Exception as e:
            print(f"Error sending message: {e}")
            self.log_to_messages(f"Error sending message: {e}")

    def show_connection_dialog(self):
        dialog = Toplevel(self)
        dialog.title("Connect to Server")
        dialog.geometry("300x150")

        tk.Label(dialog, text="Host:").grid(row=0, column=0, padx=5, pady=5)
        host_entry = ttk.Entry(dialog)
        host_entry.insert(0, self.host)
        host_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(dialog, text="Port:").grid(row=1, column=0, padx=5, pady=5)
        port_entry = ttk.Entry(dialog)
        port_entry.insert(0, str(self.port))
        port_entry.grid(row=1, column=1, padx=5, pady=5)

        def connect():
            self.host = host_entry.get()
            self.port = int(port_entry.get())
            dialog.destroy()
            self.connect_to_server()

        ttk.Button(dialog, text="Connect", command=connect).grid(row=2, columnspan=2, pady=10)

    def connect_to_server(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.host, self.port))
            self.regression_manager.client_socket = self.client_socket
            print("Connected to server")
            self.receive_thread = threading.Thread(target=self.receive_messages, daemon=True)
            self.receive_thread.start()
            self.log_to_messages("Connected to server")
            self.connection_status.config(text="Connected")
        except Exception as e:
            print(f"Error connecting to server: {e}")
            messagebox.showerror("Connection Error", f"Could not connect to server: {e}")
            self.connection_status.config(text=f"Disconnected (Error: {e})")

    def receive_messages(self):
        while True:
            try:
                data = self.client_socket.recv(1024).decode()
                if data:
                    with self.lock:
                        if self.regression_manager.is_running:
                            self.regression_queue.put(data)
                        else:
                            self.general_queue.put(data)
                else:
                    break
            except Exception as e:
                print(f"Error receiving message: {e}")
                with self.lock:
                    self.log_to_messages(f"Error receiving message: {e}")
                    self.connection_status.config(text="Disconnected")
                break

    def process_queue(self):
        try:
            while True:
                message = self.general_queue.get_nowait()
                self.log_to_messages(f"Received: {message}")
        except queue.Empty:
            self.master.after(100, self.process_queue)

    def on_order_tree_select(self, event):
        pass

    def on_transaction_select(self, event):
        pass

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--no-gui":
        host = sys.argv[2] if len(sys.argv) > 2 else 'localhost'
        port = int(sys.argv[3]) if len(sys.argv) > 3 else 5000
        test_cases = sys.argv[4:] if len(sys.argv) > 4 else None
        
        runner = RegressionRunnerCLI(host, port, test_cases)
        success = runner.run()
        sys.exit(0 if success else 1)
    else:
        root = tk.Tk()
        app = FixClientSimulator(master=root)
        app.pack(fill="both", expand=True)
        root.mainloop()
