import tkinter as tk
from tkinter import ttk, messagebox
import socket
import threading
import queue

class Session:
    def __init__(self, name, host, port, protocol, log_callback, status_callback):
        self.name = name
        self.host = host
        self.port = port
        self.protocol = protocol
        self.socket = None
        self.message_queue = queue.Queue()
        self.receive_thread = None
        self.connected = False
        self.log_callback = log_callback
        self.status_callback = status_callback

    def connect(self):
        try:
            if self.protocol == "TCP":
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.socket.connect((self.host, self.port))
            else:  # UDP
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            
            self.connected = True
            self.log_callback(self.name, f"Connected via {self.protocol} to {self.host}:{self.port}")
            self.status_callback(self.name, self.connected)
            
            if self.protocol == "TCP":
                self.receive_thread = threading.Thread(target=self.receive_tcp_messages, daemon=True)
            else:
                self.receive_thread = threading.Thread(target=self.receive_udp_messages, daemon=True)
                
            self.receive_thread.start()
        except Exception as e:
            self.log_callback(self.name, f"Error connecting: {e}")
            self.connected = False
            self.status_callback(self.name, self.connected)

    def send_message(self, message):
        if self.socket and self.connected:
            try:
                if self.protocol == "TCP":
                    self.socket.sendall(message.encode())
                else:
                    self.socket.sendto(message.encode(), (self.host, self.port))
                self.log_callback(self.name, f"Sent via {self.protocol}: {message}")
            except Exception as e:
                self.log_callback(self.name, f"Error sending message: {e}")
                self.connected = False
                self.status_callback(self.name, self.connected)

    def receive_tcp_messages(self):
        while self.connected:
            try:
                data = self.socket.recv(1024).decode()
                if data:
                    self.message_queue.put(data)
            except Exception as e:
                self.log_callback(self.name, f"Connection error: {e}")
                self.connected = False
                self.status_callback(self.name, self.connected)
                break

    def receive_udp_messages(self):
        while self.connected:
            try:
                data, addr = self.socket.recvfrom(1024)
                if data:
                    self.message_queue.put(data.decode())
            except Exception as e:
                self.log_callback(self.name, f"Receive error: {e}")
                self.connected = False
                self.status_callback(self.name, self.connected)

    def get_next_message(self):
        try:
            return self.message_queue.get_nowait()
        except queue.Empty:
            return None

class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")
        self.sessions = {}
        self.session_logs = {}

        self.setup_ui()
        self.setup_menu()
        self.setup_styles()
        
        self.master.after(100, self.process_messages)

    def setup_ui(self):
        self.pack(fill="both", expand=True)
        
        # Create notebook with styled tabs
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill="both", expand=True, padx=5, pady=5)

    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')  # Use a theme that supports tab coloring
        
        # Configure normal tab appearance
        style.configure("TNotebook.Tab", padding=(10, 5))
        
        # Connected tab style (green)
        style.configure("Connected.TNotebook.Tab", 
                      background="#d0f0d0",
                      foreground="#004400",
                      font=('Helvetica', 10, 'bold'))
        
        # Disconnected tab style (red)
        style.configure("Disconnected.TNotebook.Tab", 
                      background="#f0d0d0",
                      foreground="#440000",
                      font=('Helvetica', 10, 'bold'))

    def setup_menu(self):
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)
        connection_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Connection", menu=connection_menu)
        connection_menu.add_command(label="Add Session", command=self.show_add_session_dialog)
        connection_menu.add_command(label="Exit", command=self.master.quit)

    def show_add_session_dialog(self):
        dialog = tk.Toplevel(self)
        dialog.title("Add Session")
        dialog.geometry("300x250")

        fields = [
            ("Session Name:", "entry"),
            ("Server IP:", "entry"),
            ("Port:", "entry"),
            ("Protocol:", "combobox")
        ]

        entries = {}
        for i, (label, field_type) in enumerate(fields):
            tk.Label(dialog, text=label).pack(pady=2)
            if field_type == "entry":
                entry = ttk.Entry(dialog)
                entry.pack(pady=2)
                entries[label] = entry
            elif field_type == "combobox":
                combo = ttk.Combobox(dialog, values=["TCP", "UDP"], state="readonly")
                combo.set("TCP")
                combo.pack(pady=2)
                entries[label] = combo

        def add_session():
            try:
                name = entries["Session Name:"].get().strip()
                ip = entries["Server IP:"].get().strip()
                port = entries["Port:"].get().strip()
                protocol = entries["Protocol:"].get().strip()

                if not all([name, ip, port, protocol]):
                    raise ValueError("All fields are required")
                if not port.isdigit():
                    raise ValueError("Invalid port number")
                if name in self.sessions:
                    raise ValueError("Session name already exists")

                port = int(port)
                log_callback = lambda sn, msg: self.master.after(0, self.log_message, sn, msg)
                status_callback = lambda sn, status: self.master.after(0, self.update_tab_style, sn, status)
                session = Session(name, ip, port, protocol, log_callback, status_callback)
                self.sessions[name] = session

                frame, log_widget = self.create_session_tab(name)
                self.notebook.add(frame, text=name)
                self.session_logs[name] = log_widget
                self.update_tab_style(name, session.connected)
                session.connect()
                dialog.destroy()

            except Exception as e:
                messagebox.showerror("Error", str(e))

        ttk.Button(dialog, text="Add Session", command=add_session).pack(pady=10)

    def create_session_tab(self, session_name):
        frame = ttk.Frame(self.notebook)
        
        # Message log with scrollbar
        log_frame = ttk.Frame(frame)
        log_frame.pack(fill="both", expand=True, padx=5, pady=5)

        scrollbar = ttk.Scrollbar(log_frame)
        scrollbar.pack(side="right", fill="y")

        log_text = tk.Text(log_frame, wrap="word", yscrollcommand=scrollbar.set, state="disabled")
        log_text.pack(side="left", fill="both", expand=True)
        scrollbar.config(command=log_text.yview)

        # Message entry area
        input_frame = ttk.Frame(frame)
        input_frame.pack(fill="x", padx=5, pady=5)

        self.message_entry = ttk.Entry(input_frame)
        self.message_entry.pack(side="left", fill="x", expand=True, padx=2)

        send_button = ttk.Button(input_frame, text="Send", 
                               command=lambda: self.send_message(session_name))
        send_button.pack(side="right", padx=2)

        return frame, log_text

    def update_tab_style(self, session_name, connected):
        if session_name in self.sessions:
            style = "Connected.TNotebook.Tab" if connected else "Disconnected.TNotebook.Tab"
            self.notebook.tab(session_name, style=style)

    def log_message(self, session_name, message):
        if session_name in self.session_logs:
            log_widget = self.session_logs[session_name]
            log_widget.config(state="normal")
            log_widget.insert("end", message + "\n")
            log_widget.config(state="disabled")
            log_widget.yview("end")

    def process_messages(self):
        for session_name, session in self.sessions.items():
            while True:
                message = session.get_next_message()
                if not message:
                    break
                self.log_message(session_name, f"Received ({session.protocol}): {message}")
        
        self.master.after(100, self.process_messages)

    def send_message(self, session_name):
        if session_name not in self.sessions:
            messagebox.showerror("Error", "Session not found")
            return
        
        message = self.message_entry.get()
        if message:
            self.sessions[session_name].send_message(message)
            self.message_entry.delete(0, "end")

if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("800x600")
    app = FixClientSimulator(master=root)
    root.mainloop()
