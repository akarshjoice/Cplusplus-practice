import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import socket
import threading
import queue


class FixClientSimulator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        master.title("FIX Client Simulator")

        # Socket setup
        self.host = 'localhost'  # Default server address
        self.port = 5000  # Default server port
        self.client_socket = None
        self.message_queue = queue.Queue()

        # Menu bar
        self.setup_menu()

        # Notebook for multiple sessions
        self.notebook = ttk.Notebook(self.master)
        self.notebook.pack(fill="both", expand=True)

        # Add initial session
        self.add_session()

        # Start processing the message queue
        self.process_queue()

    def setup_menu(self):
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)

        # Connection menu
        connection_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Connection", menu=connection_menu)
        connection_menu.add_command(label="Connect", command=self.show_connection_dialog)
        connection_menu.add_command(label="Add Session", command=self.add_session)

    def add_session(self):
        # Create a new frame for the session
        session_frame = tk.Frame(self.notebook)
        self.notebook.add(session_frame, text=f"Session {self.notebook.index('end') + 1}")
        self.setup_ui(session_frame)

    def setup_ui(self, session_frame):
        # Layout configuration
        session_frame.grid_rowconfigure(0, weight=1)
        session_frame.grid_columnconfigure(0, weight=1)

        # Section 1: Order Details
        section1 = tk.Frame(session_frame)
        section1.grid(row=0, column=0, sticky="nsew")
        section1.rowconfigure(0, weight=1)
        section1.rowconfigure(1, weight=1)
        section1.rowconfigure(2, weight=1)

        order_tree_frame = ttk.Labelframe(section1, text="Order Details")
        order_tree_frame.grid(row=0, column=0, sticky="nsew")
        order_tree_frame.rowconfigure(0, weight=1)
        order_tree_frame.columnconfigure(0, weight=1)

        order_tree = ttk.Treeview(order_tree_frame, columns=("clordid", "price", "quantity", "messagetype"), show="headings")
        order_tree.heading("clordid", text="ClOrdID")
        order_tree.heading("price", text="Price")
        order_tree.heading("quantity", text="Quantity")
        order_tree.heading("messagetype", text="MessageType")
        order_tree.grid(row=0, column=0, sticky="nsew")

        order_tree_xscrollbar = ttk.Scrollbar(order_tree_frame, orient="horizontal", command=order_tree.xview)
        order_tree.configure(xscrollcommand=order_tree_xscrollbar.set)
        order_tree_xscrollbar.grid(row=1, column=0, sticky="ew")

        order_tree_yscrollbar = ttk.Scrollbar(order_tree_frame, orient="vertical", command=order_tree.yview)
        order_tree.configure(yscrollcommand=order_tree_yscrollbar.set)
        order_tree_yscrollbar.grid(row=0, column=1, sticky="ns")

        order_transactions_frame = ttk.Labelframe(section1, text="Order Transactions")
        order_transactions_frame.grid(row=1, column=0, sticky="nsew")
        order_transactions_frame.rowconfigure(0, weight=1)
        order_transactions_frame.columnconfigure(0, weight=1)

        order_transactions_list = tk.Listbox(order_transactions_frame)
        order_transactions_list.grid(row=0, column=0, sticky="nsew")

        order_transactions_xscrollbar = ttk.Scrollbar(order_transactions_frame, orient="horizontal", command=order_transactions_list.xview)
        order_transactions_list.configure(xscrollcommand=order_transactions_xscrollbar.set)
        order_transactions_xscrollbar.grid(row=1, column=0, sticky="ew")

        order_transactions_yscrollbar = ttk.Scrollbar(order_transactions_frame, orient="vertical", command=order_transactions_list.yview)
        order_transactions_list.configure(yscrollcommand=order_transactions_yscrollbar.set)
        order_transactions_yscrollbar.grid(row=0, column=1, sticky="ns")

        fix_fields_frame = ttk.Labelframe(section1, text="FIX Fields")
        fix_fields_frame.grid(row=2, column=0, sticky="nsew")
        fix_fields_frame.columnconfigure(1, weight=1)

        symbol_label = ttk.Label(fix_fields_frame, text="Symbol:")
        symbol_label.grid(row=0, column=0, padx=5, pady=5)
        symbol_entry = ttk.Entry(fix_fields_frame)
        symbol_entry.grid(row=0, column=1, padx=5, pady=5)

        price_label = ttk.Label(fix_fields_frame, text="Price:")
        price_label.grid(row=1, column=0, padx=5, pady=5)
        price_entry = ttk.Entry(fix_fields_frame)
        price_entry.grid(row=1, column=1, padx=5, pady=5)

        qty_label = ttk.Label(fix_fields_frame, text="Qty:")
        qty_label.grid(row=2, column=0, padx=5, pady=5)
        qty_entry = ttk.Entry(fix_fields_frame)
        qty_entry.grid(row=2, column=1, padx=5, pady=5)

        ordertype_label = ttk.Label(fix_fields_frame, text="OrderType:")
        ordertype_label.grid(row=3, column=0, padx=5, pady=5)
        ordertype_entry = ttk.Entry(fix_fields_frame)
        ordertype_entry.grid(row=3, column=1, padx=5, pady=5)

        send_button = ttk.Button(fix_fields_frame, text="Send", command=lambda: self.send_message(symbol_entry, price_entry, qty_entry, ordertype_entry))
        send_button.grid(row=4, columnspan=2, pady=10)

        # Section 2: Message Info
        section2 = tk.Frame(session_frame)
        section2.grid(row=0, column=1, sticky="nsew")
        section2.rowconfigure(0, weight=1)
        section2.columnconfigure(0, weight=1)

        message_info_frame = ttk.Labelframe(section2, text="Message Info")
        message_info_frame.grid(row=0, column=0, sticky="nsew")
        message_info_text = tk.Text(message_info_frame, height=10, wrap="word")
        message_info_text.pack(fill="both", expand=True)

        # Bind events
        order_tree.bind("<ButtonRelease-1>", lambda event: self.on_order_tree_select(order_tree))
        order_transactions_list.bind("<ButtonRelease-1>", lambda event: self.on_transaction_select(order_transactions_list, message_info_text))

    def show_connection_dialog(self):
        dialog = tk.Toplevel(self)
        dialog.title("Connect to Server")
        dialog.geometry("300x150")

        tk.Label(dialog, text="Server IP:").pack(pady=5)
        ip_entry = ttk.Entry(dialog)
        ip_entry.pack(pady=5)

        tk.Label(dialog, text="Port:").pack(pady=5)
        port_entry = ttk.Entry(dialog)
        port_entry.pack(pady=5)

        def connect():
            ip = ip_entry.get().strip()
            port = port_entry.get().strip()
            if ip and port.isdigit():
                self.host = ip
                self.port = int(port)
                dialog.destroy()
                self.connect_to_server()
            else:
                messagebox.showerror("Error", "Invalid IP or Port")

        connect_button = ttk.Button(dialog, text="Connect", command=connect)
        connect_button.pack(pady=10)

    def connect_to_server(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.host, self.port))
            print("Connected to server")
            self.receive_thread = threading.Thread(target=self.receive_messages, daemon=True)
            self.receive_thread.start()
        except Exception as e:
            print(f"Error connecting to server: {e}")
            messagebox.showerror("Connection Error", f"Could not connect to server: {e}")

    def send_message(self, symbol_entry, price_entry, qty_entry, ordertype_entry):
        symbol = symbol_entry.get()
        price = price_entry.get()
        qty = qty_entry.get()
        ordertype = ordertype_entry.get()

        message = f"Symbol={symbol};Price={price};Qty={qty};OrderType={ordertype}"
        try:
            self.client_socket.sendall(message.encode())
            symbol_entry.delete(0, tk.END)
            price_entry.delete(0, tk.END)
            qty_entry.delete(0, tk.END)
            ordertype_entry.delete(0, tk.END)
        except Exception as e:
            print(f"Error sending message: {e}")

    def receive_messages(self):
        while True:
            try:
                data = self.client_socket.recv(1024).decode()
                if data:
                    self.message_queue.put(data)
                else:
                    break
            except Exception as e:
                print(f"Error receiving message: {e}")
                break

    def process_queue(self):
        while not self.message_queue.empty():
            data = self.message_queue.get()
            # Update the message info text in the active session
            active_tab = self.notebook.select()
            active_frame = self.notebook.nametowidget(active_tab)
            message_info_text = active_frame.winfo_children()[0].winfo_children()[1].winfo_children()[0].winfo_children()[0]
            message_info_text.insert(tk.END, data + "\n")
            message_info_text.see(tk.END)
        self.master.after(100, self.process_queue)

    def on_order_tree_select(self, order_tree):
        selected = order_tree.selection()
        if not selected:
            return
        item = selected[0]
        clordid = order_tree.item(item, "values")[0]
        print(f"Selected ClOrdID: {clordid}")

    def on_transaction_select(self, order_transactions_list, message_info_text):
        selected_index = order_transactions_list.curselection()
        if selected_index:
            selected_transaction = order_transactions_list.get(selected_index)
            # Display selected transaction details in the Message Info section
            message_info_text.delete("1.0", tk.END)
            message_info_text.insert(tk.END, selected_transaction)
            message_info_text.see(tk.END)


if __name__ == "__main__":
    root = tk.Tk()
    app = FixClientSimulator(master=root)
    app.pack(fill="both", expand=True)
    root.mainloop()
