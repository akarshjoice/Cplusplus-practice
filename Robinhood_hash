#include <iostream>
#include <string>
#include <vector>
#include <cstdint>
#include <algorithm>

// Robin Hood hash table for option symbols
class RobinHoodHashTable {
private:
    struct Slot {
        const std::string* key; // Pointer to string
        uint8_t psl : 4;       // Probe sequence length (0â€“15)
        bool occupied : 1;     // Occupancy flag
        Slot() : key(nullptr), psl(0), occupied(false) {}
    };

    std::vector<Slot> table; // Fixed-size table
    size_t table_size;       // Number of slots
    uint64_t seed;           // Seed for hash function
    std::vector<size_t> collision_counts; // Track collisions
    size_t max_psl;          // Track max probe length

    // Custom hash function (FNV-1a-inspired, no preprocessing)
    size_t hash(const std::string& key) const {
        uint64_t hash = seed ^ 0x811c9dc5ULL; // FNV offset basis
        const uint64_t prime = 0x100000001b3ULL; // FNV prime
        for (char c : key) {
            hash ^= static_cast<uint64_t>(c);
            hash *= prime;
            hash ^= (hash >> 23) ^ (hash << 13); // Extra mixing for structured strings
        }
        size_t result = static_cast<size_t>(hash % table_size);
        collision_counts[result]++;
        return result;
    }

    // Insert a key at a position, swapping if needed
    void insert_at(size_t pos, const std::string* key, uint8_t psl) {
        if (psl > 15) psl = 15; // Cap PSL to fit in 4 bits
        if (!table[pos].occupied || table[pos].psl < psl) {
            // Swap with current slot
            const std::string* temp_key = table[pos].key;
            uint8_t temp_psl = table[pos].psl;
            bool temp_occupied = table[pos].occupied;

            table[pos].key = key;
            table[pos].psl = psl;
            table[pos].occupied = true;
            max_psl = std::max(max_psl, static_cast<size_t>(psl));

            if (temp_occupied) {
                // Continue inserting displaced key
                size_t new_pos = (pos + 1) % table_size;
                insert_at(new_pos, temp_key, temp_psl + 1);
            }
        } else {
            // Move to next position
            size_t new_pos = (pos + 1) % table_size;
            insert_at(new_pos, key, psl + 1);
        }
    }

public:
    RobinHoodHashTable(size_t num_keys, uint64_t seed_val = 0xdeadbeefULL)
        : table_size(num_keys / 0.8), seed(seed_val), max_psl(0) {
        table.resize(table_size);
        collision_counts.resize(table_size, 0);
    }

    // Build the table
    void build(const std::vector<std::string>& keys) {
        // Clear table and collisions
        for (auto& slot : table) {
            slot.key = nullptr;
            slot.psl = 0;
            slot.occupied = false;
        }
        std::fill(collision_counts.begin(), collision_counts.end(), 0);
        max_psl = 0;

        // Insert all keys
        for (const auto& key : keys) {
            size_t pos = hash(key);
            insert_at(pos, &key, 0);
        }
    }

    // Lookup a key
    bool find(const std::string& key) const {
        size_t pos = hash(key);
        size_t psl = 0;

        while (psl <= max_psl && table[pos].occupied) {
            if (*table[pos].key == key) {
                return true;
            }
            if (table[pos].psl < psl) {
                break; // Early termination: no key with higher PSL
            }
            pos = (pos + 1) % table_size;
            psl++;
        }
        return false;
    }

    // Diagnostics
    size_t size() const { return table_size; }
    size_t get_max_psl() const { return max_psl; }
    size_t max_collisions() const {
        return *std::max_element(collision_counts.begin(), collision_counts.end());
    }
};

// Generate dummy option symbols
std::vector<std::string> generate_symbols(size_t n) {
    std::vector<std::string> symbols;
    symbols.reserve(n);
    for (size_t i = 0; i < n; ++i) {
        symbols.push_back("AAPL250620C" + std::to_string(100000 + i));
    }
    return symbols;
}

int main() {
    // 10,000 symbols
    auto symbols = generate_symbols(10'000);
    const size_t num_keys = symbols.size();
    const size_t target_table_size = num_keys / 0.8; // ~12,500 slots

    // Build table
    RobinHoodHashTable table(num_keys);
    table.build(symbols);

    std::cout << "Table built with " << table.size() << " slots (load factor: "
              << static_cast<double>(num_keys) / table.size() << ")\n";
    std::cout << "Max probe length: " << table.get_max_psl() << "\n";
    std::cout << "Max collisions: " << table.max_collisions() << "\n";

    // Test lookups
    size_t found = 0;
    for (const auto& symbol : symbols) {
        if (table.find(symbol)) {
            found++;
        }
    }
    std::cout << "Found " << found << "/" << num_keys << " symbols\n";

    // Test a missing key
    std::string missing = "AAPL250620C099999";
    if (!table.find(missing)) {
        std::cout << "Correctly not found: " << missing << "\n";
    }

    // Memory usage
    size_t memory_bytes = table.size() * sizeof(Slot) + symbols.size() * sizeof(std::string);
    std::cout << "Estimated memory: " << memory_bytes / 1024.0 / 1024.0 << " MB\n";

    return 0;
}
