import tkinter as tk
from tkinter import ttk


class FixClientSimulator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("FIX Client Simulator")
        self.geometry("1000x700")  # Adjust the default size

        # Menu bar with Connect option
        self.create_menu()

        # Main layout: Two vertical sections
        self.create_sections()

    def create_menu(self):
        menubar = tk.Menu(self)
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="Connect", command=self.connect)
        menubar.add_cascade(label="File", menu=file_menu)
        self.config(menu=menubar)

    def connect(self):
        print("Connecting to FIX server...")

    def create_sections(self):
        # Configure grid layout for the root window
        self.rowconfigure(0, weight=3)  # Section 1 (Top) takes more space
        self.rowconfigure(1, weight=1)  # Section 2 (Bottom) is also resizable
        self.columnconfigure(0, weight=1)  # Single column layout for both sections

        # Section 1 (Top) - Contains Frame 1, Frame 2, Frame 3 (horizontally arranged)
        section1 = tk.Frame(self, relief=tk.SUNKEN, borderwidth=1)
        section1.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        # Configure horizontal layout within Section 1
        section1.columnconfigure(0, weight=1)
        section1.columnconfigure(1, weight=1)
        section1.columnconfigure(2, weight=1)

        # Frame 1 - Order Sent Details
        self.frame1 = tk.Frame(section1, relief=tk.SUNKEN, borderwidth=1)
        self.frame1.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        self.treeview = ttk.Treeview(
            self.frame1, columns=("Order ID", "Quantity", "Price"), show="headings"
        )
        self.treeview.heading("Order ID", text="Client Order ID")
        self.treeview.heading("Quantity", text="Quantity")
        self.treeview.heading("Price", text="Price")
        self.treeview.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

        # Scrollbar for Treeview
        self.treeview_scroll = tk.Scrollbar(
            self.frame1, orient=tk.VERTICAL, command=self.treeview.yview
        )
        self.treeview.config(yscrollcommand=self.treeview_scroll.set)
        self.treeview_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # Frame 2 - Responses for Orders
        self.frame2 = tk.Frame(section1, relief=tk.SUNKEN, borderwidth=1)
        self.frame2.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)

        self.response_treeview = ttk.Treeview(
            self.frame2, columns=("Message Type"), show="headings"
        )
        self.response_treeview.heading("Message Type", text="Message Type")
        self.response_treeview.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

        # Scrollbar for Responses
        self.response_treeview_scroll = tk.Scrollbar(
            self.frame2, orient=tk.VERTICAL, command=self.response_treeview.yview
        )
        self.response_treeview.config(yscrollcommand=self.response_treeview_scroll.set)
        self.response_treeview_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # Frame 3 - Scrollable Order Entry Fields
        self.frame3_container = tk.Frame(section1, relief=tk.SUNKEN, borderwidth=1)
        self.frame3_container.grid(row=0, column=2, sticky="nsew", padx=5, pady=5)

        self.canvas = tk.Canvas(self.frame3_container)
        self.scrollbar = ttk.Scrollbar(
            self.frame3_container, orient="vertical", command=self.canvas.yview
        )
        self.scrollable_frame = ttk.Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")),
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        self.add_default_fields()
        self.add_field_button = tk.Button(
            self.scrollable_frame, text="Add Field", command=self.add_field
        )
        self.add_field_button.grid(row=3, column=0, padx=5, pady=5)

        # Section 2 (Bottom) - Message Details
        section2 = tk.Frame(self, relief=tk.SUNKEN, borderwidth=1)
        section2.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        self.msg_display_label = tk.Label(section2, text="Message Details:")
        self.msg_display_label.pack()

        self.msg_details = tk.Text(section2, wrap=tk.WORD)
        self.msg_details.pack(fill=tk.BOTH, expand=True)

    def add_default_fields(self):
        """Add default FIX fields."""
        default_labels = ["Client Order ID", "Quantity", "Price"]
        for i, label in enumerate(default_labels):
            tk.Label(self.scrollable_frame, text=f"{label}:").grid(
                row=i, column=0, padx=5, pady=5
            )
            tk.Entry(self.scrollable_frame).grid(row=i, column=1, padx=5, pady=5)

    def add_field(self):
        """Add new FIX field dynamically."""
        row = len(self.scrollable_frame.winfo_children()) // 2
        tk.Label(self.scrollable_frame, text=f"Field {row}:").grid(
            row=row, column=0, padx=5, pady=5
        )
        tk.Entry(self.scrollable_frame).grid(row=row, column=1, padx=5, pady=5)


# Running the application
if __name__ == "__main__":
    app = FixClientSimulator()
    app.mainloop()
