import tkinter as tk
from tkinter import ttk


class FixClientSimulator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("FIX Client Simulator")
        self.geometry("1200x800")

        # Menu bar
        self.menu_bar = tk.Menu(self)
        self.config(menu=self.menu_bar)
        self.menu_bar.add_command(label="Add Session", command=self.show_add_session_form)

        # Order Input Frame
        self.add_order_frame = ttk.LabelFrame(self, text="Add Order")
        self.add_order_frame.pack(fill=tk.X, padx=5, pady=5)

        ttk.Label(self.add_order_frame, text="Client Order ID:").grid(row=0, column=0, padx=5, pady=5)
        self.order_id_entry = ttk.Entry(self.add_order_frame)
        self.order_id_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(self.add_order_frame, text="Price:").grid(row=0, column=2, padx=5, pady=5)
        self.price_entry = ttk.Entry(self.add_order_frame)
        self.price_entry.grid(row=0, column=3, padx=5, pady=5)

        ttk.Label(self.add_order_frame, text="Quantity:").grid(row=0, column=4, padx=5, pady=5)
        self.quantity_entry = ttk.Entry(self.add_order_frame)
        self.quantity_entry.grid(row=0, column=5, padx=5, pady=5)

        ttk.Label(self.add_order_frame, text="Session Name:").grid(row=0, column=6, padx=5, pady=5)
        self.session_entry = ttk.Entry(self.add_order_frame)
        self.session_entry.grid(row=0, column=7, padx=5, pady=5)

        ttk.Button(self.add_order_frame, text="Add Order", command=self.add_order).grid(row=0, column=8, padx=5, pady=5)

        # Order Frame with Column Names
        self.order_frame = ttk.LabelFrame(self, text="Orders")
        self.order_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        self.order_canvas = tk.Canvas(self.order_frame)
        self.order_scrollbar = ttk.Scrollbar(self.order_frame, orient="vertical", command=self.order_canvas.yview)
        self.order_canvas.configure(yscrollcommand=self.order_scrollbar.set)

        self.order_table_frame = ttk.Frame(self.order_canvas)
        self.order_table_frame.bind(
            "<Configure>",
            lambda e: self.order_canvas.configure(scrollregion=self.order_canvas.bbox("all")),
        )
        self.order_canvas.create_window((0, 0), window=self.order_table_frame, anchor="nw")
        self.order_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.order_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Add column headers
        headers = ["Client Order ID", "Price", "Quantity", "Session Name"]
        for col, header in enumerate(headers):
            ttk.Label(self.order_table_frame, text=header, font=("Arial", 10, "bold")).grid(row=0, column=col, padx=5, pady=5)

        self.orders = []
        self.order_row = 1  # Track rows for adding new orders

        # Detail Frame
        self.detail_frame = ttk.LabelFrame(self, text="Order Details and Responses")
        self.detail_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # Footer Tabs
        self.footer_tabs = ttk.Notebook(self)
        self.footer_tabs.pack(side=tk.BOTTOM, fill=tk.X)

    def add_order(self):
        """Add an order to the order table dynamically."""
        clorid = self.order_id_entry.get()
        price = self.price_entry.get()
        quantity = self.quantity_entry.get()
        session = self.session_entry.get()

        if not clorid or not price or not quantity or not session:
            tk.messagebox.showwarning("Missing Data", "All fields must be filled!")
            return

        order = {"clorid": clorid, "price": price, "quantity": quantity, "session": session, "responses": []}
        self.orders.append(order)

        ttk.Label(self.order_table_frame, text=clorid).grid(row=self.order_row, column=0, padx=5, pady=5)
        ttk.Label(self.order_table_frame, text=price).grid(row=self.order_row, column=1, padx=5, pady=5)
        ttk.Label(self.order_table_frame, text=quantity).grid(row=self.order_row, column=2, padx=5, pady=5)
        ttk.Label(self.order_table_frame, text=session).grid(row=self.order_row, column=3, padx=5, pady=5)

        # Bind click event to show responses
        row = self.order_row
        for col in range(4):
            self.order_table_frame.grid_slaves(row=row, column=col)[0].bind(
                "<Button-1>", lambda e, o=order: self.show_order_responses(o)
            )

        self.order_row += 1
        self.clear_order_form()

    def clear_order_form(self):
        """Clear the order input form."""
        self.order_id_entry.delete(0, tk.END)
        self.price_entry.delete(0, tk.END)
        self.quantity_entry.delete(0, tk.END)
        self.session_entry.delete(0, tk.END)

    def show_order_responses(self, order):
        """Display order responses in the detail frame."""
        for widget in self.detail_frame.winfo_children():
            widget.destroy()

        ttk.Label(self.detail_frame, text=f"Details for Order {order['clorid']}", font=("Arial", 12, "bold")).pack(anchor="w", padx=10, pady=5)

        # Mock response data for demonstration
        ttk.Label(self.detail_frame, text="Response 1: FIX tag details").pack(anchor="w", padx=10)
        ttk.Label(self.detail_frame, text="Response 2: FIX tag details").pack(anchor="w", padx=10)

    def show_add_session_form(self):
        """Display a form for adding a new session."""
        form = tk.Toplevel(self)
        form.title("Add Session")
        form.geometry("400x300")

        # Session Name
        ttk.Label(form, text="Session Name:").pack(pady=10, anchor="w", padx=20)
        session_name_entry = ttk.Entry(form)
        session_name_entry.pack(padx=20, fill=tk.X)

        # IP Address
        ttk.Label(form, text="IP Address:").pack(pady=10, anchor="w", padx=20)
        ip_entry = ttk.Entry(form)
        ip_entry.pack(padx=20, fill=tk.X)

        # Port
        ttk.Label(form, text="Port:").pack(pady=10, anchor="w", padx=20)
        port_entry = ttk.Entry(form)
        port_entry.pack(padx=20, fill=tk.X)

        # Add Button
        def add_session():
            session_name = session_name_entry.get()
            ip = ip_entry.get()
            port = port_entry.get()
            if session_name and ip and port:
                self.add_session(session_name, ip, port)
                form.destroy()

        ttk.Button(form, text="Add Session", command=add_session).pack(pady=20)

    def add_session(self, session_name, ip, port):
        """Add a new session tab."""
        session_frame = ttk.Frame(self.footer_tabs)
        self.footer_tabs.add(session_frame, text=session_name)

        ttk.Label(session_frame, text=f"Session: {session_name}").pack(pady=10)
        ttk.Label(session_frame, text=f"IP Address: {ip}").pack(pady=5)
        ttk.Label(session_frame, text=f"Port: {port}").pack(pady=5)


if __name__ == "__main__":
    app = FixClientSimulator()
    app.mainloop()
