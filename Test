import tkinter as tk
from tkinter import ttk
import socket

class FixClientSim:
    def __init__(self, root):
        self.root = root
        self.root.title("FIX Client Simulator")
        self.init_ui()
        self.client_socket = None

    def init_ui(self):
        # Connection Section
        conn_frame = tk.Frame(self.root)
        tk.Label(conn_frame, text="Host:").grid(row=0, column=0)
        self.host_entry = tk.Entry(conn_frame)
        self.host_entry.grid(row=0, column=1)
        tk.Label(conn_frame, text="Port:").grid(row=0, column=2)
        self.port_entry = tk.Entry(conn_frame)
        self.port_entry.grid(row=0, column=3)
        tk.Button(conn_frame, text="Connect", command=self.connect).grid(row=0, column=4)
        tk.Button(conn_frame, text="Disconnect", command=self.disconnect).grid(row=0, column=5)
        conn_frame.pack(pady=5)

        # Message Section
        msg_frame = tk.Frame(self.root)
        tk.Label(msg_frame, text="Message:").grid(row=0, column=0)
        self.message_entry = tk.Entry(msg_frame, width=50)
        self.message_entry.grid(row=0, column=1)
        tk.Button(msg_frame, text="Send", command=self.send_message).grid(row=0, column=2)
        msg_frame.pack(pady=5)

        # Logs Section
        logs_frame = tk.Frame(self.root)
        tk.Label(logs_frame, text="Logs:").pack()
        self.logs = tk.Text(logs_frame, height=10, width=80)
        self.logs.pack()
        logs_frame.pack(pady=5)

    def connect(self):
        host = self.host_entry.get()
        port = int(self.port_entry.get())
        try:
            self.client_socket = socket.create_connection((host, port))
            self.log(f"Connected to {host}:{port}")
        except Exception as e:
            self.log(f"Connection failed: {e}")

    def disconnect(self):
        if self.client_socket:
            self.client_socket.close()
            self.client_socket = None
            self.log("Disconnected")

    def send_message(self):
        if self.client_socket:
            message = self.message_entry.get()
            self.client_socket.sendall(message.encode())
            self.log(f"Sent: {message}")
        else:
            self.log("Not connected")

    def log(self, message):
        self.logs.insert(tk.END, message + "\n")
        self.logs.see(tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = FixClientSim(root)
    root.mainloop()
