import tkinter as tk
from tkinter import ttk

class FixClientSimulator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("FIX Client Simulator")
        self.geometry("800x600")
        
        # Menu bar with Connect option
        self.create_menu()

        # Main content - 4 frames
        self.create_frames()

    def create_menu(self):
        menubar = tk.Menu(self)
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="Connect", command=self.connect)
        menubar.add_cascade(label="File", menu=file_menu)
        self.config(menu=menubar)

    def connect(self):
        # Placeholder for connect functionality
        print("Connecting to FIX server...")

    def create_frames(self):
        # Frame 1 - Order Sent Details (Treeview)
        self.frame1 = tk.Frame(self)
        self.frame1.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.treeview = ttk.Treeview(self.frame1, columns=("Order ID", "Quantity", "Price"), show="headings")
        self.treeview.heading("Order ID", text="Client Order ID")
        self.treeview.heading("Quantity", text="Quantity")
        self.treeview.heading("Price", text="Price")
        self.treeview.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

        # Scrollbar for Treeview
        self.treeview_scroll = tk.Scrollbar(self.frame1, orient=tk.VERTICAL, command=self.treeview.yview)
        self.treeview.config(yscrollcommand=self.treeview_scroll.set)
        self.treeview_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # Frame 2 - Responses for Orders (Treeview)
        self.frame2 = tk.Frame(self)
        self.frame2.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.response_treeview = ttk.Treeview(self.frame2, columns=("Message Type"), show="headings")
        self.response_treeview.heading("Message Type", text="Message Type")
        self.response_treeview.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

        # Scrollbar for Responses
        self.response_treeview_scroll = tk.Scrollbar(self.frame2, orient=tk.VERTICAL, command=self.response_treeview.yview)
        self.response_treeview.config(yscrollcommand=self.response_treeview_scroll.set)
        self.response_treeview_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # Frame 3 - Order Entry Fields and Send Button
        self.frame3 = tk.Frame(self)
        self.frame3.pack(fill=tk.X, padx=10, pady=10)

        # Labels and Entry Fields for FIX tag and values
        self.fix_tag_label = tk.Label(self.frame3, text="FIX Tag:")
        self.fix_tag_label.grid(row=0, column=0, padx=5, pady=5)
        self.fix_tag_entry = tk.Entry(self.frame3)
        self.fix_tag_entry.grid(row=0, column=1, padx=5, pady=5)

        self.value_label = tk.Label(self.frame3, text="Value:")
        self.value_label.grid(row=1, column=0, padx=5, pady=5)
        self.value_entry = tk.Entry(self.frame3)
        self.value_entry.grid(row=1, column=1, padx=5, pady=5)

        self.send_button = tk.Button(self.frame3, text="Send Order", command=self.send_order)
        self.send_button.grid(row=2, columnspan=2, pady=10)

        # Frame 4 - Message Field Display
        self.frame4 = tk.Frame(self)
        self.frame4.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.msg_display_label = tk.Label(self.frame4, text="Message Details:")
        self.msg_display_label.pack()

        self.msg_details = tk.Text(self.frame4, wrap=tk.WORD, height=10)
        self.msg_details.pack(fill=tk.BOTH, expand=True)

    def send_order(self):
        # Get values from entry fields
        fix_tag = self.fix_tag_entry.get()
        value = self.value_entry.get()

        # Add the order to Frame 1 Treeview (order sent details)
        order_id = f"Order_{len(self.treeview.get_children()) + 1}"  # Simulate Order ID
        quantity = "100"  # Default quantity
        price = "50.00"  # Default price
        self.treeview.insert("", "end", values=(order_id, quantity, price))

        # Simulate a response and add it to Frame 2 (response details)
        message_type = f"Response for {order_id}"  # Simulate response message
        self.response_treeview.insert("", "end", values=(message_type))

        # Clear the entry fields
        self.fix_tag_entry.delete(0, tk.END)
        self.value_entry.delete(0, tk.END)

    def on_response_click(self, event):
        selected_item = self.response_treeview.selection()[0]
        message_type = self.response_treeview.item(selected_item, "values")[0]
        self.msg_details.delete(1.0, tk.END)
        self.msg_details.insert(tk.END, f"Message Type: {message_type}\nDetails: {message_type} details go here.")

# Running the application
if __name__ == "__main__":
    app = FixClientSimulator()
    app.mainloop()
