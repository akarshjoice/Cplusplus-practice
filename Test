import tkinter as tk
from tkinter import ttk


class FixClientSimulator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("FIX Client Simulator")
        self.geometry("1200x800")

        # Menu bar
        self.menu_bar = tk.Menu(self)
        self.config(menu=self.menu_bar)
        self.menu_bar.add_command(label="Add Session", command=self.add_session)

        # Frame A: Orders Display
        self.frame_a = ttk.Treeview(self, columns=("Client Order ID", "Price", "Quantity", "Session"), show="headings")
        self.frame_a.heading("Client Order ID", text="Client Order ID")
        self.frame_a.heading("Price", text="Price")
        self.frame_a.heading("Quantity", text="Quantity")
        self.frame_a.heading("Session", text="Session")
        self.frame_a.pack(fill=tk.BOTH, expand=True)
        self.frame_a.bind("<Double-1>", self.show_order_details)

        # Example data
        self.frame_a.insert("", "end", values=("12345", "100.5", "200", "Session 1"))

        # Footer Tabs
        self.footer_tabs = ttk.Notebook(self)
        self.footer_tabs.pack(side=tk.BOTTOM, fill=tk.X)

        # Add first session
        self.add_session()

    def add_session(self):
        session_frame = ttk.Frame(self.footer_tabs)
        self.footer_tabs.add(session_frame, text=f"Session {len(self.footer_tabs.tabs()) + 1}")

        # Session-specific FIX Tags Frame
        tags_frame = ttk.LabelFrame(session_frame, text="FIX Tags")
        tags_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        # Mandatory FIX tags
        ttk.Label(tags_frame, text="Mandatory FIX Tags:").pack(anchor="nw", padx=5, pady=5)
        mandatory_tags = ["Tag1", "Tag2", "Tag3"]
        for tag in mandatory_tags:
            ttk.Label(tags_frame, text=f"{tag}:").pack(anchor="nw", padx=10)

        # Scrollable Additional Tags
        additional_frame = ttk.LabelFrame(session_frame, text="Additional Tags")
        additional_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        canvas = tk.Canvas(additional_frame)
        scroll_y = ttk.Scrollbar(additional_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scroll_y.set)

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scroll_y.pack(side=tk.RIGHT, fill=tk.Y)

        ttk.Button(scrollable_frame, text="Add Tag", command=lambda: self.add_new_tag(scrollable_frame)).pack(anchor="nw", pady=5)

    def add_new_tag(self, frame):
        row = len(frame.winfo_children())
        ttk.Entry(frame).pack(anchor="nw", pady=5)

    def show_order_details(self, event):
        selected_item = self.frame_a.selection()
        if not selected_item:
            return

        order_details = self.frame_a.item(selected_item, "values")

        # Create a new window for order details
        order_window = tk.Toplevel(self)
        order_window.title("Order Details")
        ttk.Label(order_window, text=f"Order Details: {order_details}").pack(pady=10)

        # Example response details
        ttk.Label(order_window, text="Responses:").pack(anchor="nw", padx=10, pady=5)
        response_list = ["Response 1", "Response 2"]
        for response in response_list:
            ttk.Label(order_window, text=response).pack(anchor="nw", padx=20)


if __name__ == "__main__":
    app = FixClientSimulator()
    app.mainloop()
