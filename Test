import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

class FixClientSimulator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("FIX Client Simulator")
        self.geometry("1000x600")
        
        # Initialize variables
        self.sessions = {}  # Stores session configurations
        self.logs = []      # Stores log messages
        
        # Initialize testing framework
        self.testing_framework = TestingFramework()

        # Create GUI
        self.create_menu_bar()
        self.create_main_layout()

    def create_menu_bar(self):
        """Creates the menu bar."""
        menubar = tk.Menu(self)
        self.config(menu=menubar)

        # Session menu
        session_menu = tk.Menu(menubar, tearoff=0)
        session_menu.add_command(label="Add Session", command=self.add_session)
        session_menu.add_command(label="Close Session", command=self.close_session)
        menubar.add_cascade(label="Sessions", menu=session_menu)

        # Testing menu
        test_menu = tk.Menu(menubar, tearoff=0)
        test_menu.add_command(label="Run Test", command=self.run_test)
        menubar.add_cascade(label="Tests", menu=test_menu)

    def create_main_layout(self):
        """Creates the main layout with frames."""
        # Left: Sessions Panel
        self.frame_sessions = ttk.Frame(self, padding="5")
        self.frame_sessions.grid(row=0, column=0, sticky="nsw", padx=5, pady=5)
        ttk.Label(self.frame_sessions, text="Sessions", font=("Arial", 12, "bold")).pack(anchor="w")

        # Right: Logs Panel
        self.frame_logs = ttk.Notebook(self)
        self.frame_logs.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        self.log_viewer = LogViewer(self.frame_logs)
        self.frame_logs.add(self.log_viewer, text="Logs")

        # Bottom: Message Creation Panel
        self.frame_message_creation = MessageCreationForm(self)
        self.frame_message_creation.grid(row=1, column=0, columnspan=2, sticky="ew", padx=5, pady=5)

        # Expandable configuration
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

    def add_session(self):
        """Handles adding a new FIX session."""
        session_name = f"Session {len(self.sessions) + 1}"
        self.sessions[session_name] = {"status": "Stopped"}
        self.update_sessions_panel()
        messagebox.showinfo("Session Added", f"{session_name} added.")

    def close_session(self):
        """Handles closing a FIX session."""
        if not self.sessions:
            messagebox.showwarning("No Sessions", "No active sessions to close.")
            return
        session_name = list(self.sessions.keys())[-1]
        del self.sessions[session_name]
        self.update_sessions_panel()
        messagebox.showinfo("Session Closed", f"{session_name} closed.")

    def update_sessions_panel(self):
        """Updates the sessions panel."""
        for widget in self.frame_sessions.winfo_children():
            widget.destroy()
        ttk.Label(self.frame_sessions, text="Sessions", font=("Arial", 12, "bold")).pack(anchor="w")
        for session_name in self.sessions:
            status = self.sessions[session_name]["status"]
            ttk.Label(self.frame_sessions, text=f"{session_name} - {status}").pack(anchor="w")

    def run_test(self):
        """Runs a predefined test scenario."""
        self.testing_framework.execute_test_cases()
        messagebox.showinfo("Run Test", "Test scenario execution completed.")

class MessageCreationForm(ttk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.fields = {}
        
        ttk.Label(self, text="Create FIX Message", font=("Arial", 12)).pack(anchor="w", pady=5)
        
        # Scrollable container for dynamic fields
        self.canvas = tk.Canvas(self)
        self.scrollable_frame = ttk.Frame(self.canvas)
        self.scrollable_frame.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))

        scrollbar = ttk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=scrollbar.set)

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Buttons
        ttk.Button(self, text="Add Tag", command=self.add_tag).pack(pady=5)
        ttk.Button(self, text="Send Message", command=self.send_message).pack(pady=5)

    def add_tag(self):
        """Dynamically adds a tag entry field."""
        tag_index = len(self.fields) + 1
        label = ttk.Label(self.scrollable_frame, text=f"Tag {tag_index}")
        entry = ttk.Entry(self.scrollable_frame)
        label.grid(row=tag_index, column=0, pady=2, sticky="w")
        entry.grid(row=tag_index, column=1, pady=2, sticky="w")
        self.fields[tag_index] = entry

    def send_message(self):
        """Handles sending the created message."""
        message = {tag: entry.get() for tag, entry in self.fields.items()}
        print("Message Sent:", message)
        self.master.log_viewer.add_log(f"Message Sent: {message}")

class LogViewer(ttk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        
        self.log_text = tk.Text(self, wrap="word")
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)
        
    def add_log(self, message):
        """Adds a log message."""
        self.log_text.insert("end", f"{message}\n")
        self.log_text.see("end")

class TestingFramework:
    def __init__(self):
        self.test_cases = []

    def add_test_case(self, name, scenario):
        self.test_cases.append({"name": name, "scenario": scenario})

    def execute_test_cases(self):
        for test in self.test_cases:
            print(f"Executing {test['name']}")
            # Simulate workflow here
            messagebox.showinfo("Test Execution", f"Test case {test['name']} executed.")

if __name__ == "__main__":
    app = FixClientSimulator()
    app.mainloop()
